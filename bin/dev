#!/usr/bin/env python
import os
import sys
import json

mount_point = lambda c, p: "/mnt/vps2/%s/%s" % (c, p)
src_path = lambda c, p: "/usr/local/chroots/%s/usr/local/src/%s" % (c, p)
chroot_src_path = lambda p: "/usr/local/src/%s" % p

class Commands(object):
    def __init__(self, chroot):
        self.chroot = chroot

    def mount_fs(self, project):
        m = mount_point(self.chroot, project)
        r = src_path(self.chroot, project)
        if not os.path.exists(m):
            os.mkdir(m)
        if os.path.ismount(m):
            print "*** unmounting %s from %s" % (r, m)
            os.system("sudo umount %s" % m)
            return False
        else:
            print "*** mounting %s on %s" % (r, m)
            os.system("sshfs dave-sullivan.com:%s %s" % (r, m))
            return True

    def ssh(self, project):
        os.system("ssh dave-sullivan.com -t schroot -c %s -d %s" % (self.chroot, chroot_src_path(project)))

with open(os.path.expanduser("~/.devrc")) as f:
    config_json = json.load(f)

CHROOTS = {}
for chroot in config_json['chroots']:
    CHROOTS[chroot] = Commands(chroot)

PROJECTS = {}
for project, project_config in config_json['projects'].items():
    PROJECTS[project] = project_config

if PROJECTS.has_key(sys.argv[1]):

    cmd = CHROOTS[PROJECTS[sys.argv[1]]['chroot']]
    if cmd.mount_fs(sys.argv[1]):
        cmd.ssh(sys.argv[1])
        cmd.mount_fs(sys.argv[1])

elif sys.argv[1] == 'addproject':
    
    if len(sys.argv) < 4:
        print "Usage: dev addproject <name> <chroot>"
        sys.exit(1)

    if config_json['projects'].has_key(sys.argv[2]):
        print "Error: Project '%s' already exists!" % sys.argv[2]
        sys.exit(1)

    if sys.argv[3] not in config_json['chroots']:
        print "Error: Chroot '%s' does not exist!" % sys.argv[3]
        sys.exit(1)

    config_json['projects'][sys.argv[2]] = {'chroot': sys.argv[3]}
    with open(os.path.expanduser("~/.devrc"), "w") as f:
        f.writelines(json.dumps(config_json))
